@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>

<div class="container">
    <textarea id="chatWindow" readonly rows="10" cols="30" style="width: 100%;"></textarea> <!-- This is the chat window -->
    <br>
    <input type="text" id="userInput" placeholder="Enter your name" />
    <input type="text" id="messageInput" placeholder="Enter your message" />
    <input type="button" id="sendButton" value="Send Message" />
</div>

<script type="text/javascript">
    function typeMessage(element, message, index = 0) {
        if (index < message.length) {
            element.value += message.charAt(index);
            setTimeout(() => typeMessage(element, message, index + 1), 200);
        }
    }

    // Fetch the riddle when the page loads or based on some user action
    function fetchRiddle() {
        fetch('/api/Quest/GetRiddle')
            .then(response => response.json())
            .then(riddle => {
                const chatWindow = document.getElementById("chatWindow");
                typeMessage(chatWindow, "Cleora: " + riddle.Question);
                currentRiddleId = riddle.Id; // Storing the current riddle's Id for evaluation
            });
    }

    document.getElementById("sendButton").addEventListener("click", function (event) {
        const user = document.getElementById("userInput").value;
        const message = document.getElementById("messageInput").value;

        document.getElementById("sendButton").addEventListener("click", function (event) {
            const user = document.getElementById("userInput").value;
            const message = document.getElementById("messageInput").value;
            const chatWindow = document.getElementById("chatWindow");

            // Check if the user is greeting Cleora
            if (message.trim().toLowerCase() === "hello") {
                const cleoraReply = "Hello, " + user + "!";
                typeMessage(chatWindow, "Cleora: " + cleoraReply);
            } else {
                // Evaluate the user's answer
                fetch('/api/Quest/EvaluateAnswer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        riddleId: currentRiddleId,
                        answer: message
                    })
                })
                    .then(response => response.json())
                    .then(isCorrect => {
                        if (isCorrect) {
                            typeMessage(chatWindow, "Cleora: Good job, that's correct.");
                            // If the answer is correct, fetch the next riddle
                            fetchRiddle();
                        } else {
                            typeMessage(chatWindow, "Cleora: That is incorrect. Try again.");
                        }
                    });
            }

            chatWindow.scrollTop = chatWindow.scrollHeight; // Auto-scroll to the latest message

            // Clear the message input after sending
            document.getElementById("messageInput").value = "";

            event.preventDefault();
        });


    // Send message when "Enter" key is pressed in the message input box
    document.getElementById("messageInput").addEventListener("keydown", function (event) {
        if (event.key === "Enter") {
            event.preventDefault();
            document.getElementById("sendButton").click();
        }
    });

    // Initiate the first riddle when the page loads
    let currentRiddleId;
    fetchRiddle();

</script>


